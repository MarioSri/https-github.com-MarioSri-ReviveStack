// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  username          String?   @unique
  github_id         String?
  bio               String?
  reputation_score  Float     @default(0)
  stripe_account_id String?
  password          String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  projects     Project[]
  purchases    Transaction[] @relation("Buyer")
  sales        Transaction[] @relation("Seller")
  reviews_given Review[]     @relation("Reviewer")
  reviews_received Review[]   @relation("Reviewee")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id               String    @id @default(cuid())
  seller_id        String
  title            String
  description      String?
  github_url       String
  demo_url         String?
  price            Float
  status           String    @default("active") // active, sold, withdrawn
  tech_stack       String[]
  last_commit_date DateTime?
  stars            Int       @default(0)
  forks            Int       @default(0)
  ai_valuation     Json?
  health_score     Int?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  seller       User          @relation(fields: [seller_id], references: [id])
  transactions Transaction[]
}

model Transaction {
  id                       String    @id @default(cuid())
  project_id               String
  buyer_id                 String
  seller_id                String
  amount                   Float
  commission               Float
  status                   String    @default("pending") // pending, escrowed, completed, disputed
  stripe_payment_intent_id String?
  escrow_release_date      DateTime?
  created_at               DateTime  @default(now())
  updated_at               DateTime  @updatedAt

  project Project @relation(fields: [project_id], references: [id])
  buyer   User    @relation("Buyer", fields: [buyer_id], references: [id])
  seller  User    @relation("Seller", fields: [seller_id], references: [id])
  reviews Review[]
}

model Review {
  id             String   @id @default(cuid())
  transaction_id String
  reviewer_id    String
  reviewee_id    String
  rating         Int
  comment        String?
  created_at     DateTime @default(now())

  transaction Transaction @relation(fields: [transaction_id], references: [id])
  reviewer    User        @relation("Reviewer", fields: [reviewer_id], references: [id])
  reviewee    User        @relation("Reviewee", fields: [reviewee_id], references: [id])
}
